// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshot tests Snapshot on <App /> | enzyme shallow 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="App-header"
>
          <img
                    alt="logo"
                    className="App-logo"
                    src="logo.svg"
          />
          <h2>
                    Convert kg to stone
          </h2>
</div>,
        <styled.div>
          <styled.div>
                    <styled.input
                              innerRef={[Function]}
                              onChange={[Function]}
                              type="number"
                              value={0}
                    />
                     kg
          </styled.div>
          <styled.div>
                    <styled.input
                              onChange={[Function]}
                              type="number"
                              value={0}
                    />
                     stone
          </styled.div>
          <styled.div>
                    <styled.input
                              onChange={[Function]}
                              type="number"
                              value={0}
                    />
                     lbs
          </styled.div>
</styled.div>,
        <styled.div
          invisible={true}
>
          <h2>
                    Hello World
          </h2>
</styled.div>,
        <styled.div>
          <h2>
                    Goodbye Cruel World
          </h2>
</styled.div>,
        <Widget
          invisible={true}
>
          Fancy pants child prop
</Widget>,
        <Widget>
          Text is a child prop
</Widget>,
      ],
      "className": "App",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <img
              alt="logo"
              className="App-logo"
              src="logo.svg"
/>,
            <h2>
              Convert kg to stone
</h2>,
          ],
          "className": "App-header",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "logo",
              "className": "App-logo",
              "src": "logo.svg",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Convert kg to stone",
            },
            "ref": null,
            "rendered": "Convert kg to stone",
            "type": "h2",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <styled.div>
              <styled.input
                            innerRef={[Function]}
                            onChange={[Function]}
                            type="number"
                            value={0}
              />
               kg
</styled.div>,
            <styled.div>
              <styled.input
                            onChange={[Function]}
                            type="number"
                            value={0}
              />
               stone
</styled.div>,
            <styled.div>
              <styled.input
                            onChange={[Function]}
                            type="number"
                            value={0}
              />
               lbs
</styled.div>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <styled.input
                  innerRef={[Function]}
                  onChange={[Function]}
                  type="number"
                  value={0}
/>,
                " kg",
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "innerRef": [Function],
                  "onChange": [Function],
                  "type": "number",
                  "value": 0,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              " kg",
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <styled.input
                  onChange={[Function]}
                  type="number"
                  value={0}
/>,
                " stone",
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "onChange": [Function],
                  "type": "number",
                  "value": 0,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              " stone",
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <styled.input
                  onChange={[Function]}
                  type="number"
                  value={0}
/>,
                " lbs",
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "onChange": [Function],
                  "type": "number",
                  "value": 0,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              " lbs",
            ],
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <h2>
            Hello World
</h2>,
          "invisible": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Hello World",
          },
          "ref": null,
          "rendered": "Hello World",
          "type": "h2",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <h2>
            Goodbye Cruel World
</h2>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Goodbye Cruel World",
          },
          "ref": null,
          "rendered": "Goodbye Cruel World",
          "type": "h2",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "Fancy pants child prop",
          "invisible": true,
        },
        "ref": null,
        "rendered": "Fancy pants child prop",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "Text is a child prop",
        },
        "ref": null,
        "rendered": "Text is a child prop",
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="App-header"
>
            <img
                        alt="logo"
                        className="App-logo"
                        src="logo.svg"
            />
            <h2>
                        Convert kg to stone
            </h2>
</div>,
          <styled.div>
            <styled.div>
                        <styled.input
                                    innerRef={[Function]}
                                    onChange={[Function]}
                                    type="number"
                                    value={0}
                        />
                         kg
            </styled.div>
            <styled.div>
                        <styled.input
                                    onChange={[Function]}
                                    type="number"
                                    value={0}
                        />
                         stone
            </styled.div>
            <styled.div>
                        <styled.input
                                    onChange={[Function]}
                                    type="number"
                                    value={0}
                        />
                         lbs
            </styled.div>
</styled.div>,
          <styled.div
            invisible={true}
>
            <h2>
                        Hello World
            </h2>
</styled.div>,
          <styled.div>
            <h2>
                        Goodbye Cruel World
            </h2>
</styled.div>,
          <Widget
            invisible={true}
>
            Fancy pants child prop
</Widget>,
          <Widget>
            Text is a child prop
</Widget>,
        ],
        "className": "App",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <img
                alt="logo"
                className="App-logo"
                src="logo.svg"
/>,
              <h2>
                Convert kg to stone
</h2>,
            ],
            "className": "App-header",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "alt": "logo",
                "className": "App-logo",
                "src": "logo.svg",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Convert kg to stone",
              },
              "ref": null,
              "rendered": "Convert kg to stone",
              "type": "h2",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <styled.div>
                <styled.input
                                innerRef={[Function]}
                                onChange={[Function]}
                                type="number"
                                value={0}
                />
                 kg
</styled.div>,
              <styled.div>
                <styled.input
                                onChange={[Function]}
                                type="number"
                                value={0}
                />
                 stone
</styled.div>,
              <styled.div>
                <styled.input
                                onChange={[Function]}
                                type="number"
                                value={0}
                />
                 lbs
</styled.div>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <styled.input
                    innerRef={[Function]}
                    onChange={[Function]}
                    type="number"
                    value={0}
/>,
                  " kg",
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "innerRef": [Function],
                    "onChange": [Function],
                    "type": "number",
                    "value": 0,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                " kg",
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <styled.input
                    onChange={[Function]}
                    type="number"
                    value={0}
/>,
                  " stone",
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "onChange": [Function],
                    "type": "number",
                    "value": 0,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                " stone",
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <styled.input
                    onChange={[Function]}
                    type="number"
                    value={0}
/>,
                  " lbs",
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "onChange": [Function],
                    "type": "number",
                    "value": 0,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                " lbs",
              ],
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <h2>
              Hello World
</h2>,
            "invisible": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Hello World",
            },
            "ref": null,
            "rendered": "Hello World",
            "type": "h2",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <h2>
              Goodbye Cruel World
</h2>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Goodbye Cruel World",
            },
            "ref": null,
            "rendered": "Goodbye Cruel World",
            "type": "h2",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Fancy pants child prop",
            "invisible": true,
          },
          "ref": null,
          "rendered": "Fancy pants child prop",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Text is a child prop",
          },
          "ref": null,
          "rendered": "Text is a child prop",
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`snapshot tests Snapshot on <App /> | react-test-renderer 1`] = `
<div
  className="App"
>
  <div
    className="App-header"
  >
    <img
      alt="logo"
      className="App-logo"
      src="logo.svg"
    />
    <h2>
      Convert kg to stone
    </h2>
  </div>
  <div
    className="sc-htpNat eusUoO"
  >
    <div
      className="sc-htpNat eusUoO"
    >
      <input
        className="sc-bxivhb ihvhmd"
        onChange={[Function]}
        type="number"
        value={0}
      />
       kg
    </div>
    <div
      className="sc-ifAKCX ftoKPH"
    >
      <input
        className="sc-bxivhb ihvhmd"
        onChange={[Function]}
        type="number"
        value={0}
      />
       stone
    </div>
    <div
      className="sc-ifAKCX ftoKPH"
    >
      <input
        className="sc-bxivhb ihvhmd"
        onChange={[Function]}
        type="number"
        value={0}
      />
       lbs
    </div>
  </div>
  <div
    className="sc-bdVaJa empOPp"
  >
    <h2>
      Hello World
    </h2>
  </div>
  <div
    className="sc-bdVaJa ivQMso"
  >
    <h2>
      Goodbye Cruel World
    </h2>
  </div>
  <div
    className="sc-bwzfXH ZZYNN"
  >
    Fancy pants child prop
  </div>
  <div
    className="sc-bwzfXH fTfPYm"
  >
    Text is a child prop
  </div>
</div>
`;
